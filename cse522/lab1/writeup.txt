1. Robert Miller and Cameron Whipple

3. 
We developed a loop that constantly repeats and calls the schedule() function to provide other threads access to cpu. What we noticed was that the cpu usage would skyrocket to near 100% utilization. We were forced to power off the device as we were not able to disable the thread. To retrieve output, a sleep of a second was introduced into the kernel thread to allow other threads access to the cpu. Below is the output from the dmesg command showing the creation and deletion of that thread.

6. 
pi@raspberrypi:~/Documents/RPi-Linux-4.1.13/cse522/lab1 $ dmesg
[  841.563542] spawn_init
[  841.567334] Spawned thread started
[  842.579460] monitor_framework_thread; count=0x00000001
[  843.589457] monitor_framework_thread; count=0x00000002
[  844.599531] monitor_framework_thread; count=0x00000003
[  845.609490] monitor_framework_thread; count=0x00000004
[  846.619545] monitor_framework_thread; count=0x00000005
[  847.629486] monitor_framework_thread; count=0x00000006
[  848.639463] monitor_framework_thread; count=0x00000007
[  849.649480] monitor_framework_thread; count=0x00000008
[  850.659480] monitor_framework_thread; count=0x00000009
[  851.669474] monitor_framework_thread; count=0x0000000a
[  852.679501] monitor_framework_thread; count=0x0000000b
[  853.689477] monitor_framework_thread; count=0x0000000c
[  854.699517] monitor_framework_thread; count=0x0000000d
[  855.709480] monitor_framework_thread; count=0x0000000e
[  856.251610] spawn_exit
[  856.719439] monitor_framework_thread; count=0x0000000f
[  856.724590] monitor_framework_thread; CLOSING

The times seem to be varying around the 1000 microsecond point. The timer was configured to go off every second but is going off around 1.01 seconds instead.

7. 
[ 1716.029960] microsoft 0003:045E:00DB.0006: input,hidraw2: USB HID v1.11 Device [Microsoft NaturalÂ® Ergonomic Keyboard 4000] on usb-3f980000.usb-1.3/input1
[ 1716.964171] monitor_framework_thread; nvcsw=244, nivcsw=3
[ 1717.964296] monitor_framework_thread; nvcsw=245, nivcsw=3
[ 1718.964401] monitor_framework_thread; nvcsw=246, nivcsw=3
[ 1719.964508] monitor_framework_thread; nvcsw=247, nivcsw=3
[ 1720.964616] monitor_framework_thread; nvcsw=248, nivcsw=3
[ 1721.964765] monitor_framework_thread; nvcsw=249, nivcsw=3
[ 1722.964869] monitor_framework_thread; nvcsw=250, nivcsw=3
[ 1723.964990] monitor_framework_thread; nvcsw=251, nivcsw=3
[ 1724.965094] monitor_framework_thread; nvcsw=252, nivcsw=3
[ 1725.965200] monitor_framework_thread; nvcsw=253, nivcsw=3
[ 1726.965302] monitor_framework_thread; nvcsw=254, nivcsw=3
[ 1727.965406] monitor_framework_thread; nvcsw=255, nivcsw=3
pi@raspberrypi:~/Documents/RPi-Linux-4.1.13/cse522/lab1 $ 

8.
From the logs generated as part of step 7, it is clear that there are significantly more voluntary context switches than involuntary. The nvcsw increments each time the kernel thread is getting a chance to execute. It seems that the voluntary count increases each time that the thread makes use of the schedule() function. In this case, the thread is voluntarily giving up the resources for another process to run. The involuntary context switching is most likely a result of our kernel thread being interrupted while in the middle of execution.

12.

13.
Delta 1 = 0.000376 seconds
Delta 2 = 0.000112 seconds
Delta 3 = 0.000127 seconds

14.
Delta 1 = 0.000058 seconds
Delta 2 = 0.000084 seconds
Delta 3 = 0.000323 seconds

15.
ksoftirqd/0-3     [000] 15165.780829: sched_switch:         ksoftirqd/0:3 [98] S ==> framework/0:11042 [120]
framework/0-11042 [000] 15165.780871: sched_switch:         framework/0:11042 [120] S ==> swapper/0:0 [120]
	runtime=0.000042 seconds

ksoftirqd/0-3     [000] 15166.780889: sched_switch:         ksoftirqd/0:3 [98] S ==> framework/0:11042 [120]
framework/0-11042 [000] 15166.780953: sched_switch:         framework/0:11042 [120] S ==> swapper/0:0 [120]
	runtime=0.000064 seconds

ksoftirqd/0-3     [000] 15167.780980: sched_switch:         ksoftirqd/0:3 [98] S ==> framework/0:11042 [120]
framework/0-11042 [000] 15167.781018: sched_switch:         framework/0:11042 [120] S ==> swapper/0:0 [120]
	runtime=0.00038 seconds

ksoftirqd/0-3     [000] 15168.781036: sched_switch:         ksoftirqd/0:3 [98] S ==> framework/0:11042 [120]
framework/0-11042 [000] 15168.781102: sched_switch:         framework/0:11042 [120] S ==> swapper/0:0 [120]
	runtime=0.000066 seconds

ksoftirqd/0-3     [000] 15169.781126: sched_switch:         ksoftirqd/0:3 [98] S ==> framework/0:11042 [120]
framework/0-11042 [000] 15169.781168: sched_switch:         framework/0:11042 [120] S ==> swapper/0:0 [120]
	runtime=0.000042 seconds

Max = 0.000113 seconds
Min  = 0.000027 seconds

16.
/* @todo - develop procedure as outlined */
trace-cmd report | grep framework/0 | cut -f1 -d ':' | cut -f2 -d ']' > times.txt



