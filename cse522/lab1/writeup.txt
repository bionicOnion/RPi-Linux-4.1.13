1. Robert Miller and Cameron Whipple

3. 
We developed a loop that constantly repeats and calls the schedule() function to provide other threads access to cpu. What we noticed was that the cpu usage would skyrocket to near 100% utilization. We were forced to power off the device as we were not able to disable the thread. To retrieve output, a sleep of a second was introduced into the kernel thread to allow other threads access to the cpu. Below is the output from the dmesg command showing the creation and deletion of that thread.

pi@raspberrypi:~/Documents/RPi-Linux-4.1.13/cse522/lab1 $ dmesg
[  841.563542] spawn_init
[  841.567334] Spawned thread started
[  842.579460] monitor_framework_thread; count=0x00000001
[  843.589457] monitor_framework_thread; count=0x00000002
[  844.599531] monitor_framework_thread; count=0x00000003
[  845.609490] monitor_framework_thread; count=0x00000004
[  846.619545] monitor_framework_thread; count=0x00000005
[  847.629486] monitor_framework_thread; count=0x00000006
[  848.639463] monitor_framework_thread; count=0x00000007
[  849.649480] monitor_framework_thread; count=0x00000008
[  850.659480] monitor_framework_thread; count=0x00000009
[  851.669474] monitor_framework_thread; count=0x0000000a
[  852.679501] monitor_framework_thread; count=0x0000000b
[  853.689477] monitor_framework_thread; count=0x0000000c
[  854.699517] monitor_framework_thread; count=0x0000000d
[  855.709480] monitor_framework_thread; count=0x0000000e
[  856.251610] spawn_exit
[  856.719439] monitor_framework_thread; count=0x0000000f
[  856.724590] monitor_framework_thread; CLOSING



